apply plugin: 'android'

dependencies {
	//android.jar
	//compile files("${android.sdk}/platforms/${android.target}/android.jar")

	compile fileTree(dir: 'libs', include: '*.jar')

	compile project(':library:WdFramework')
	compile project(':library:WdCommonUI')
	compile project(':library:MyAndroidCommon')
	compile project(':library:DownloadProvider-master')
}

android {
	packagingOptions {
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
	}

	lintOptions { abortOnError false }
}

//=====================拷贝so文件=======================
task copyNativeLibs(type: Copy) {
	from(new File('libs')) { include '**/*.so' }
	into new File(buildDir, 'native-libs')
}

tasks.withType(Compile) { compileTask -> compileTask.dependsOn copyNativeLibs }

clean.dependsOn 'cleanCopyNativeLibs'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
	pkgTask.jniFolders = new HashSet<File>()
	pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}
//=======================================================

android {
	compileSdkVersion 19
	buildToolsVersion "19"

	signingConfigs {
		nbtstatx {
			storeFile file("keystore/nbtstatx.keystore")
			storePassword "nbtstatx"
			keyAlias "nbtstatx"
			keyPassword "nbtstatx"
		}
		debug { storeFile file("keystore/debug.keystore") }
	}

	buildTypes {
		release {
			signingConfig signingConfigs.nbtstatx
			runProguard true
			proguardFile getDefaultProguardFile('proguard-android.txt')
			proguardFile new File(project(':library:WdUtil').getProjectDir(), 'util-proguard-project.txt')
			proguardFile new File(project(':library:MyAndroidCommon').getProjectDir(), 'common-proguard-project.txt')
			proguardFile 'proguard-project.txt'
		}

		debug {
			signingConfig signingConfigs.debug
			runProguard false
		}

		/*
		 testPlay {
		 //在原来的包名基础上拼接形成不同的包名
		 packageNameSuffix ".test"
		 //设置不同签名
		 signingConfig  signingConfigs.wondertek
		 }
		 */
	}

	//设置不同包名的包
	productFlavors {
		original { packageName = 'android.nbtstatx.mydemos' }

		testPlay {
			packageName = 'com.testplay'
			//name=testPlay
			//minSdkVersion=8
			//targetSdkVersion=10
			//renderscriptTargetApi=18
			//versionCode=1
			//versionName=1.0
			//testPackageName=null
			//testInstrumentationRunner=null
			//signingConfig=signingConfigs.wondertek
		}
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			resources.srcDirs = ['src']
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		// Move the tests to tests/java, tests/res, etc...
		instrumentTest.setRoot('tests')

		// Move the build types to build-types/<type>
		// For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
		// This moves them out of them default location under src/<type>/... which would
		// conflict with src/ being used by the main source set.
		// Adding new build types or product flavors should be accompanied
		// by a similar customization.
		original.setRoot('build-types/original')

		//自定义渠道
		testPlay.setRoot('build-types/testplay')
	}
}
